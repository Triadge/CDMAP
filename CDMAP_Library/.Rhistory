cn=colnames(gse16873)
hn=grep('HN',cn, ignore.case =T)
adh=grep('ADH',cn, ignore.case =T)
dcis=grep('DCIS',cn, ignore.case =T)
data(kegg.gs)
data(go.gs)
lapply(kegg.gs[1:3],head)
# Kegg g.sets
kg.hsa=kegg.gsets("hsa")
kegg.gs=kg.hsa$kg.sets[kg.hsa$sigmet.idx]
save(kegg.gs, file="kegg.hsa.sigmet.gsets.RData")
# Korg
data(korg)
head(korg[,1:3])
# Go.gsets
go.hs=go.gsets(species="human")
go.bp=go.hs$go.sets[go.hs$go.subs$BP]
go.mf=go.hs$go.sets[go.hs$go.subs$MF]
go.cc=go.hs$go.sets[go.hs$go.subs$CC]
save(go.bp, go.mf, go.cc, file="go.hs.gsets.RData")
# Looking at expression changes in gene sets
gse16873.kegg.p <- gage(gse16873, gsets = kegg.gs,
ref = hn, samp = dcis)
gse16873.go.p <- gage(gse16873, gsets = go.gs,
ref = hn, samp = dcis)
str(gse16873.kegg.p, strict.width='wrap')
head(gse16873.kegg.p$greater[, 1:5], 4)
head(gse16873.kegg.p$less[, 1:5], 4)
head(gse16873.kegg.p$stats[, 1:5], 4)
# Running GAGE with same.dir=F option on KEGG pathways to capture pathways perturbed towards both directions simultaneously
gse16873.kegg.2d.p <- gage(gse16873, gsets = kegg.gs,
ref = hn, samp = dcis, same.dir = F)
head(gse16873.kegg.2d.p$greater[,1:5], 4)
head(gse16873.kegg.2d.p$stats[,1:5], 4)
# PAGE Analysis
gse16873.kegg.page.p <- gage(gse16873, gsets = kegg.gs,
ref = hn, samp = dcis, saaTest = gs.zTest)
head(gse16873.kegg.page.p$greater[, 1:5], 4)
source('~/Desktop/blahblah.r')
source('~/Desktop/blahblah.r')
write.table(gse16873.kegg.2d.p$greater, file = "gse16873.kegg.2d.p.txt",
sep = "\t")
write.table(rbind(gse16873.kegg.p$greater, gse16873.kegg.p$less),
file = "gse16873.kegg.p.txt", sep = "\t")
str(gse16873.kegg.sig, strict.width='wrap')
gse16873.kegg.2d.sig<-sigGeneSet(gse16873.kegg.2d.p, outname="gse16873.kegg")
str(gse16873.kegg.2d.sig, strict.width='wrap')
write.table(gse16873.kegg.2d.sig$greater, file = "gse16873.kegg.2d.sig.txt",
sep = "\t")
write.table(rbind(gse16873.kegg.sig$greater, gse16873.kegg.sig$less),
file = "gse16873.kegg.sig.txt", sep = "\t")
gse16873.kegg.esg.up <- esset.grp(gse16873.kegg.p$greater,
gse16873, gsets = kegg.gs, ref = hn, samp = dcis,
test4up = T, output = T, outname = "gse16873.kegg.up", make.plot = F)
gse16873.kegg.esg.dn <- esset.grp(gse16873.kegg.p$less,
gse16873, gsets = kegg.gs, ref = hn, samp = dcis,
test4up = F, output = T, outname = "gse16873.kegg.dn", make.plot = F)
names(gse16873.kegg.esg.up)
head(gse16873.kegg.esg.up$essentialSets, 4)
head(gse16873.kegg.esg.up$setGroups, 4)
head(gse16873.kegg.esg.up$coreGeneSets, 4)
rownames(gse16873.kegg.p$greater)[1:3]
gs=unique(unlist(kegg.gs[rownames(gse16873.kegg.p$greater)[1:3]]))
essData=essGene(gs, gse16873, ref =hn, samp =dcis)
head(essData, 4)
ref1=1:6
samp1=7:12
for (gs in rownames(gse16873.kegg.p$greater)[1:3]) {
outname = gsub(" |:|/", "_", substr(gs, 10, 100))
geneData(genes = kegg.gs[[gs]], exprs = essData, ref = ref1,
samp = samp1, outname = outname, txt = T, heatmap = T,
Colv = F, Rowv = F, dendrogram = "none", limit = 3, scatterplot = T)
}
for (gs in rownames(gse16873.kegg.p$greater)[1:3]) {
outname = gsub(" |:|/", "_", substr(gs, 10, 100))
geneData(genes = kegg.gs[[gs]], exprs = essData, ref = ref1,
samp = samp1, outname = outname, txt = T, heatmap = T,
Colv = F, Rowv = F, dendrogram = "none", limit = 3, scatterplot = T)
}
for (gs in rownames(gse16873.kegg.p$greater)[1:3]) {
outname = gsub(" |:|/", "_", substr(gs, 10, 100))
outname = paste(outname, "all", sep=".")
geneData(genes = kegg.gs[[gs]], exprs = gse16873, ref = hn,
samp = dcis, outname = outname, txt = T, heatmap = T,
Colv = F, Rowv = F, dendrogram = "none", limit = 3, scatterplot = T)
}
library(pathview)
gse16873.d <- gse16873[ ,dcis] - gse16873[ ,hn]
path.ids=c("hsa04110 Cell cycle", "hsa00020 Citrate cycle (TCA cycle)")
path.ids2 <- substr(path.ids, 1, 8)
#native KEGG view
pv.out.list <- sapply(path.ids2, function(pid) pathview(gene.data = gse16873.d[,
1:2], pathway.id = pid, species = "hsa"))
library(pathview)
biocLite(pathview)
library(Bioconductor)
library(bioclite)
source("https://bioconductor.org/biocLite.R")
biocLite("pathview")
library(pathview)
gse16873.d <- gse16873[ ,dcis] - gse16873[ ,hn]
path.ids=c("hsa04110 Cell cycle", "hsa00020 Citrate cycle (TCA cycle)")
path.ids2 <- substr(path.ids, 1, 8)
#native KEGG view
pv.out.list <- sapply(path.ids2, function(pid) pathview(gene.data = gse16873.d[,
1:2], pathway.id = pid, species = "hsa"))
library(pathview)
gse16873.d <- gse16873[ ,dcis] - gse16873[ ,hn]
path.ids=c("hsa04110 Cell cycle", "hsa00020 Citrate cycle (TCA cycle)")
path.ids2 <- substr(path.ids, 1, 8)
#native KEGG view
pv.out.list <- sapply(path.ids2, function(pid) pathview(gene.data = gse16873.d[,
1:2], pathway.id = pid, species = "hsa"))
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
??is.null
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
for( i in ref_Lcore)
{
#Flag checker for mutation
mutant <- (ref_Lcore[i] != query_Lcore[i])
for( i in ref_Lcore)
{
#Flag checker for mutation
mutant <- (ref_Lcore[i] == query_Lcore[i])
/Users/triadge/Desktop/Sung Lab/context_copy/Context_Data/bacteria mutation lines(Complete)/V_Cholerae_MUT line/Chr_1/Vibrio_cholerae_2740-80_chrome_1.fasta
mutant <- (ref_Rcore[i] == query_Rcore[i])
## CONTEXT DEPENDENT MUTATION DEVELOPMENT PIPELINE
# ================================================
# AUTHOR: DAVID LOGAN PATTON
# ==================================================
## Objective: Impelementation of an automated pipeline to determine and
#  assess context-dependent patterns of mutation in a bacterial genome.
#  given an input fasta file, we want this pipeline to be able to determine
# the origin and terminus of replication for a given chromosome in a MA sequence
# and split it into the left and right replichores, then using a reference sequence of the
# chromosome, determine determine where each mutation and its context (neighboring flanking nucleotides)
# and then we output the results into a text format (which we want to convert to a spreadsheet)
# =================================================
#Output
# taking runawk (using printcontext.pl) we get the following output: (example)
#           145640  T C C T A
#             (1)   2 3 4 5 6
# 1 = MUTATION POSITION 2 = MUTATED FROM, 3 = MUTATED INTO, 4,6 = LEFT AND RIGHT NEIGHBORS (CONTEXTS),
# 5 = MUTATION POSITION IN TRIPLET
#
# The output can be simply read in plain english as: "At position 145640 in the sequence, The triplet CTA had a
# mutation C[T->C]A into CCA"
# our current bash script edits the output of our printcontext.pl file into:
# Ideal output
#           num, 2, --> 3, 4, 6
# Where num is the number of instances that specific triplet incurred that mutation.
#===================================================
# Section 1: intaking the data
Path_RefFile <- readline("What is your reference sequence? (please provide the full path)")
Path_InFile <- readline("What is your Query Sequence? (please provide the full path)")
#Path_rcFile <- "/Users/triadge/Desktop/Sung Lab/context_copy/Context_Data/bacteria mutation lines(Complete)/V_Cholerae_MUT line/Chr_1/mut_rCore.txt"
#specify the path to the reference and Query sequence
#Ref_File <- read.table(Path_RefFile, header = TRUE)
#In_file <- read.table(Path_RefFile, header =TRUE)
# Read in the Fasta File and
# Extract the sequence data from the fasta files
RefFile <- getSequence(read.fasta(Path_RefFile))
QueryFile <- getSequence(read.fasta(Path_InFile))
# conversion into Character array
RefSeq_arr <<- unlist(RefFile)
len_refseq <<- length(RefSeq_arr)
QuerySeq_arr <<- unlist(QueryFile)
len_Query <<- length(QuerySeq_arr)
#==================================================
# Section 2: Determining Origin and terminus of the Query Sequence, and splitting
# them into left and right replichores
ori_ref <- oriloc(Path_InFile) #this generates the oriloc data, this is a test variable
term_pos <- which.min(ori_ref$skew) #find the position of the terminus of replication
term_value <- ori_ref$skew[term_pos] #value of the terminii
ori_pos <- which.max(ori_ref$skew) # find the position of the origin of replication
ori_value <- ori_ref$skew[ori_pos] #value of the origination position
# ==============================
# store the indices of the Reference sequence and the Query sequence to retrieve the
# positions of the mutations.
RefSeq_inds <<- c()
QSeq_inds <<- c()
iter <<- 0
for(i in 1:len_refseq)
{
RefSeq_inds[i] <- i
}
for(i in 1:len_Query)
{
QSeq_inds[i] <- i
}
# CONVERSION INTO LEFT AND RIGHT REPLICHORES
#========================================================
# to convert them into left and right replichores, we have to
# handle it in a multicase if statement
#CASES
#1 ori < term
if(ori_pos < term_pos)
{
#Partitions the Right Cores and the indices for comparison
#Generates a Right reference core and Query Cores
ref_Rcore <<- c(RefSeq_arr[ori_pos:term_pos])
query_Rcore <<- c(QuerySeq_arr[ori_pos:term_pos])
#Partitions Right reference and query core indices
ref_Rcore_inds <- c(RefSeq_inds[ori_pos:term_pos])
ref_Rcore_Index <<- c(ref_Rcore_inds)
Q_Rcore_inds <- c(QSeq_inds[ori_pos:term_pos])
Q_Rcore_Index <<- c(Q_Rcore_inds)
len_ref_Rcore <<- length(ref_Rcore) #length of ref Rcore
len_Q_Rcore <<- length(query_Rcore) #length of query Rcore
#Partitions the Left reference core and the indices for comparison
#Generates and partitions the left reference core
ref_Lcore1 <- c(RefSeq_arr[term_pos:len_refseq])
ref_Lcore2 <- c(RefSeq_arr[1:ori_pos])
ref_Lcore <- c(ref_Lcore1, ref_Lcore2)
ref_Lcore <<- rev(ref_Lcore)
len_ref_Lcore <<- length(ref_Lcore) #length of ref Lcore
#Generates and partitions the Left reference indices
ref_Lcore1_inds <- c(RefSeq_inds[term_pos:len_refseq])
ref_Lcore2_inds <- c(RefSeq_inds[1:ori_pos])
ref_Lcore_inds <- c(ref_Lcore1, ref_Lcore2)
ref_Lcore_inds <<- rev(ref_Lcore)
#generates a left query core
query_Lcore1 <- c(QuerySeq_arr[term_pos:len_refseq])
query_Lcore2 <- c(QuerySeq_arr[1:ori_pos])
query_Lcore <- c(query_Lcore1, query_Lcore2)
query_Lcore <<- rev(query_Lcore)
len_Q_Lcore <<- length(query_Lcore) #length of query Lcore
#generates left query core indices
query_Lcore1_inds <- c(QSeq_inds[term_pos:len_refseq])
query_Lcore2_inds <- c(QSeq_inds[1:ori_pos])
query_Lcore_inds <- c(query_Lcore1_inds, query_Lcore2_inds)
query_Lcore_inds <<- rev(query_Lcore_inds)
}
#2 ori > terminus
if(ori_pos > term_pos)
{
#Generates a Left reference and query core
ref_Lcore <<- c(RefSeq_arr[term_pos:ori_pos])
query_Lcore <<- c(QuerySeq_arr[term_pos:ori_pos])
len_ref_Lcore <<- length(ref_Lcore) #length of ref Lcore
len_Q_Lcore <<- length(query_Lcore) #length of Query Lcore
#Partitions Left reference and query core indices
ref_Lcore_inds <- c(RefSeq_inds[ori_pos:term_pos])
ref_Lcore_Index <<- c(ref_Lcore_inds)
Q_Lcore_inds <- c(QSeq_inds[ori_pos:term_pos])
Q_Lcore_Index <<- c(Q_Lcore_inds)
#Generates and partitions right reference core and its indices
ref_Rcore1 <- c(RefSeq_arr[ori_pos:len_refseq])
ref_Rcore2 <- c(RefSeq_arr[1:term_pos])
ref_Rcore <- c(ref_Rcore1, ref_Rcore2)
ref_Rcore <<- rev(ref_Rcore)
len_ref_Rcore <<- length(ref_Rcore) #length of ref Rcore
ref_Rcore1_inds <- c(QSeq_inds[ori_pos:len_refseq])
ref_Rcore2_inds <- c(QSeq_inds[1:term_pos])
ref_Rcore_inds <- c(ref_Rcore1_inds, ref_Rcore2_inds)
ref_Rcore_inds <<- rev(ref_Rcore_inds)
#Generates and Partitions the right Query core and its indices
query_Rcore1 <- c(QuerySeq_arr[ori_pos:len_refseq])
query_Rcore2 <- c(QuerySeq_arr[1:term_pos])
query_Rcore <- c(query_Rcore1, query_Rcore2)
query_Rcore <<- rev(query_Rcore)
len_Q_Rcore <<- length(query_Rcore) #length of Query Rcore
query_Rcore1_inds <- c(QSeq_inds[ori_pos:len_refseq])
query_Rcore2_inds <- c(QSeq_inds[1:term_pos])
query_Rcore_inds <- c(query_Rcore1_inds, query_Rcore2_inds)
query_Rcore_inds <<- rev(query_Rcore_inds)
}
# we have now generated the left and right replichores, and the associated reference replicores
# to perform our context dependent mutation rate analysis
# Section 3: Determination of the Context dependent mutations of the left and right replichores
#=========================================================================
# Setting up output Matrices:
#==============================================
context_col_names <- c("position", "left", "original", "mutation", "right")
context_abbrev <- c("position", "original", "mutant")
context_output_full_matrix <- c(context_col_names)
context_output_abbrev_matrix <- c(context_abbrev)
#==============================================
# Detect and record all the context dependent mutations in the Left Replichore
#=========================
for( i in ref_Lcore)
{
#Flag checker for mutation
mutant <- (ref_Lcore[i] == query_Lcore[i])
if(!mutant) #Determine if there is a mutation
{
mutant <- query_Lcore[i]
source <- ref_Lcore[i]
position <- as.character(ref_Lcore_inds[i])
#Flag Checkers
leftnull <- is.null(ref_Lcore[i-1])
rightnull <- is.null(ref_Lcore[i+1])
if(leftnull == FALSE) #Record the Left Flanking nucleotide
{
left <- ref_Lcore[i-1]
}
else
{
left <- ref_Rcore[1]
}
if(rightnull == FALSE) #Record the Right Flanking nucleotide
{
left <- ref_Lcore[i+1]
}
else
{
left <- ref_Rcore[len_ref_Rcore]
}
newrow <- c(position, left, source, mutation, right)
newrow_abbrev <- c(position, source, mutation)
context_output_full_matrix <- rbind(context_output_full_matrix, newrow)
context_output_abbrev_matrix <- rbind(context_output_abbrev_matrix, newrow_abbrev)
}
}
#=========================
# Detect and record all the context dependent mutations in the Right Replichore
#=========================
for( i in ref_Rcore)
{
mutant <- (ref_Rcore[i] == query_Rcore[i])
if(mutant) #Determine if there is a mutation
{
mutant <- query_Rcore[i]
source <- ref_Rcore[i]
position <- as.character(ref_Rcore_inds[i])
leftnull <- is.null(ref_Lcore[i-1])
rightnull <- is.null(ref_Lcore[i+1])
if(leftnull == FALSE) #Record the Left Flanking nucleotide
{
left <- ref_Rcore[i-1]
}
else
{
left <- ref_Lcore[1]
}
if(rightnull == FALSE) #Record the Right Flanking nucleotide
{
left <- ref_Rcore[i+1]
}
else
{
left <- ref_Lcore[len_ref_Lcore]
}
newrow <- c(position, left, source, mutation, right)
newrow_abbrev <- c(position, source, mutation)
context_output_full_matrix <- rbind(context_output_full_matrix, newrow)
context_output_abbrev_matrix <- rbind(context_output_abbrev_matrix, newrow_abbrev)
}
}
#=============================================================================
# COMMAND LINE TEST INPUT TO BEBUG
#testobj <- read.fasta(Path_RefFile)
#Testobj1 <- getSequence(testobj)
#zzb <- count(Testobj1, 1, start = 0, by = 1, alphabet = s2c("acgt")) - REVISE
#zz <- GC(testobj)
#Refseq_arr <- unlist(Tesobj1)
#testori <- oriloc(Path_RefFile)
#plot(testori$start.kb, testori$skew, type = "l", xlab = "Map position in Kb",
#           ylab = "Cumulated composite skew",
#           main = expression(italic(Vibrio~~Cholerae)~~complete~~genome))
#terminus_pos <- which.min(testori)
#terminus_value <- testori$skew[terminus_pos]
#origin_pos <- which.max(testori)
#origin_value <- testori$skew[origin_pos]
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
ref_Lcore[100] == query_Lcore[100]
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
isTRUE(query_Lcore[100]==ref_Lcore[100])
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
# Setting up output Matrices:
#==============================================
context_col_names <- c("position", "left", "original", "mutation", "right")
debugSource('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
context_output_abbrev_matrix
Lcore_context_output_abbrev_matrix
RefSeq_inds
ref_Lcore1_inds
ref_Lcore_inds
ref_Lcore2_inds
ref_Rcore1_inds
ref_Rcore_inds
ref_Rcore2_inds <- c(QSeq_inds[1:term_pos])
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
Lcore_context_output_abbrev_matrix
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
ref_Lcore_inds[1]
ref_Lcore_inds[100]
RefSeq_inds
QSeq_inds
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
source('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
## CONTEXT DEPENDENT MUTATION DEVELOPMENT PIPELINE
# ================================================
# AUTHOR: DAVID LOGAN PATTON
# ==================================================
## Objective: Impelementation of an automated pipeline to determine and
#  assess context-dependent patterns of mutation in a bacterial genome.
#  given an input fasta file, we want this pipeline to be able to determine
# the origin and terminus of replication for a given chromosome in a MA sequence
# and split it into the left and right replichores, then using a reference sequence of the
# chromosome, determine determine where each mutation and its context (neighboring flanking nucleotides)
# and then we output the results into a text format (which we want to convert to a spreadsheet)
# =================================================
#Output
# taking runawk (using printcontext.pl) we get the following output: (example)
#           145640  T C C T A
#             (1)   2 3 4 5 6
# 1 = MUTATION POSITION 2 = MUTATED FROM, 3 = MUTATED INTO, 4,6 = LEFT AND RIGHT NEIGHBORS (CONTEXTS),
# 5 = MUTATION POSITION IN TRIPLET
#
# The output can be simply read in plain english as: "At position 145640 in the sequence, The triplet CTA had a
# mutation C[T->C]A into CCA"
# our current bash script edits the output of our printcontext.pl file into:
# Ideal output
#           num, 2, --> 3, 4, 6
# Where num is the number of instances that specific triplet incurred that mutation.
#===================================================
# Section 1: intaking the data
Path_RefFile <- readline("What is your reference sequence? (please provide the full path)")
Path_InFile <- readline("What is your Query Sequence? (please provide the full path)")
#Path_rcFile <- "/Users/triadge/Desktop/Sung Lab/context_copy/Context_Data/bacteria mutation lines(Complete)/V_Cholerae_MUT line/Chr_1/mut_rCore.txt"
#specify the path to the reference and Query sequence
#Ref_File <- read.table(Path_RefFile, header = TRUE)
#In_file <- read.table(Path_RefFile, header =TRUE)
# Read in the Fasta File and
# Extract the sequence data from the fasta files
RefFile <- getSequence(read.fasta(Path_RefFile))
QueryFile <- getSequence(read.fasta(Path_InFile))
# conversion into Character array
RefSeq_arr <<- unlist(RefFile)
len_refseq <<- length(RefSeq_arr)
QuerySeq_arr <<- unlist(QueryFile)
len_Query <<- length(QuerySeq_arr)
#==================================================
# Section 2: Determining Origin and terminus of the Query Sequence, and splitting
# them into left and right replichores
#==================================================
ori_ref <- oriloc(Path_InFile) #this generates the oriloc data, this is a test variable
term_pos <- which.min(ori_ref$skew) #find the position of the terminus of replication
term_value <- ori_ref$skew[term_pos] #value of the terminii
ori_pos <- which.max(ori_ref$skew) # find the position of the origin of replication
ori_value <- ori_ref$skew[ori_pos] #value of the origination position
# ==============================
# store the indices of the Reference sequence and the Query sequence to retrieve the
# positions of the mutations.
RefSeq_inds <<- c()
QSeq_inds <<- c()
iter <<- 0
for(i in 1:len_refseq)
{
RefSeq_inds[i] <- i
}
for(i in 1:len_Query)
{
QSeq_inds[i] <- i
}
# CONVERSION INTO LEFT AND RIGHT REPLICHORES
#========================================================
# to convert them into left and right replichores, we have to
# handle it in a multicase if statement
#CASES
#1 ori < term
if(ori_pos < term_pos)
{
#Partitions the Right Cores and the indices for comparison
#Generates a Right reference core and Query Cores
ref_Rcore <<- c(RefSeq_arr[ori_pos:term_pos])
query_Rcore <<- c(QuerySeq_arr[ori_pos:term_pos])
#Partitions Right reference and query core indices
ref_Rcore_inds <- c(RefSeq_inds[ori_pos:term_pos])
ref_Rcore_Index <<- c(ref_Rcore_inds)
debugSource('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
debugSource('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
debugSource('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
debugSource('~/Desktop/Sung Lab/R workspace/Context_Project/Context_Pipeline.r')
context_output_abbrev_matrix
Lcore_context_output_full_matrix
library("seqinr")
install.packages("seqinr")
install.packages("seqinr")
debugSource('~/Desktop/CDMAP/CDMAP_MultiOrganism_Analysis.R', echo=TRUE)
debugSource('~/Desktop/CDMAP/CDMAP_MultiOrganism_Analysis.R', echo=TRUE)
username <- Sys.info()[7]
MainDir <- paste("/Users/", username, "/Desktop/CDMAP", sep = "")
LibDir <- paste("/Users/", username, "/Desktop/CDMAP/CDMAP_Library", sep = "")
flag <- readline("Home or guest?")
setwd(LibDir)
source("GC_Analysis_InitDirTriplet.r")
path_analyze <- path_to_chrome
setwd(LibDir)
source("GCcontent.r")
setwd(LibDir)
source("GC_Analysis.R")
source('~/Desktop/CDMAP/CDMAP_MultiOrganism_Analysis.R', echo=TRUE)
ls()
test <- "hello world!"
ls()
